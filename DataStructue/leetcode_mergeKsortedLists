/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

struct cmp{
	bool operator() (const ListNode*a, const ListNode* b) const{
		return a->val > b->val;
	}
};
class Solution {
public:
	ListNode* mergeKLists(vector<ListNode*>& lists) {
	    priority_queue<ListNode*, vector<ListNode*>, cmp> elePq;
		if (lists.size() == 0)
			return NULL;
		ListNode *head = NULL;
		ListNode *tmp = NULL;
		for (int i = 0; i < lists.size(); ++i){
			head = lists[i];
			while (head){
				elePq.push(head);
				head = head->next;
			}
		}
		head = NULL;
		//cout<<elePq.size()<<endl;
	    
		while (elePq.size() > 0)
		{
		    //cout<<"size: "<<elePq.size()<<endl;
			if (head){
				head->next = elePq.top();
				head = head->next;
				elePq.pop();
			}
			else{
				head = elePq.top();
				tmp = head;
				elePq.pop();
			}
			//if(head)
			//cout<<head->val<<endl;
		}
		if(head)
		head->next = NULL;
		return tmp;
	
	}
};

